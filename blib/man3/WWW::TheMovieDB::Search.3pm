.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::TheMovieDB::Search 3"
.TH WWW::TheMovieDB::Search 3 "2011-04-08" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::TheMovieDB::Search \- Perl client to the TMDb API "<http://api.themoviedb.org/2.1>"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A TMDb Search client.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This client lets you retrieve data from the TMDb \s-1API\s0; I currently have not implemented methods to write to the \s-1API\s0, I don't really plan on it, unless someone really wants the feature.
.PP
It requires that you have a TMDb \s-1API\s0 key, which you can generate by getting an account at \f(CW\*(C`<http://api.themoviedb.org/2.1>\*(C'\fR.
.SH "NOTE"
.IX Header "NOTE"
Most of this documentation is copied nearly verbatim from The Movie \s-1DB\s0 \s-1API\s0 documentation.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.ie n .IP "new( $key )" 1
.el .IP "new( \f(CW$key\fR )" 1
.IX Item "new( $key )"
Returns a new instance of this class. You are able to pass your \s-1API\s0 Key here or using the key method.
.Sp
.Vb 2
\&        my $api = new WWW::TheMovieDB::Search;
\&        my $api = new WWW::TheMovieDB::Search(\*(Aqxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\*(Aq);
.Ve
.ie n .IP "lang( $lang )" 1
.el .IP "lang( \f(CW$lang\fR )" 1
.IX Item "lang( $lang )"
Sets the search language type, default is en-US if none passed.
.Sp
Primary language: 2\-letter \s-1ISO\-639\s0 language code \f(CW\*(C`<http://en.wikipedia.org/wiki/List_of_ISO_639\-1_codes>\*(C'\fR
.Sp
.Vb 4
\&        $api\->lang(\*(Aqen\*(Aq);
\&        $api\->lang(\*(Aqen\*(Aq);
\&        $api\->lang(\*(Aqes\*(Aq);
\&        $api\->lang(\*(Aqfr\*(Aq);
.Ve
.ie n .IP "ver( $version )" 1
.el .IP "ver( \f(CW$version\fR )" 1
.IX Item "ver( $version )"
Sets the version of the \s-1API\s0 to use, default is 2.1 if none passed.
.Sp
.Vb 1
\&        $api\->ver(\*(Aq2.1\*(Aq);
.Ve
.ie n .IP "key( $key )" 1
.el .IP "key( \f(CW$key\fR )" 1
.IX Item "key( $key )"
Sets or changes the \s-1API\s0 key to use.
.Sp
.Vb 1
\&        $api\->key(\*(Aqxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\*(Aq);
.Ve
.ie n .IP "type( $type )" 1
.el .IP "type( \f(CW$type\fR )" 1
.IX Item "type( $type )"
Sets the datatype to be returned, default is xml.
.Sp
.Vb 3
\&        $api\->type(\*(Aqxml\*(Aq);
\&        $api\->type(\*(Aqyaml\*(Aq);
\&        $api\->type(\*(Aqjson\*(Aq);
.Ve
.ie n .IP "Movie_browse( %data )" 1
.el .IP "Movie_browse( \f(CW%data\fR )" 1
.IX Item "Movie_browse( %data )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.browse>\*(C'\fR
.Sp
The Movie_browse method is probably the most powerful single method on the entire TMDb \s-1API\s0. While it might not be used by all apps, it is a great place to start if you're interested in building any kind of a top 10 list.
.Sp
This method requires you pass two keys:
.RS 1
.IP "order_by" 2
.IX Item "order_by"
Three options: \f(CW\*(C`rating\*(C'\fR, \f(CW\*(C`release\*(C'\fR, \f(CW\*(C`title\*(C'\fR
.IP "order" 2
.IX Item "order"
Two options: \f(CW\*(C`asc\*(C'\fR, \f(CW\*(C`desc\*(C'\fR
.RE
.RS 1
.Sp
You must also pass one or more of the following keys.
.IP "page" 2
.IX Item "page"
Results are paginated if you use the page & per_page parameters. You can quickly scan through multiple pages with these options. Value is expected to be an integer.
.IP "per_page" 2
.IX Item "per_page"
This value sets the number of results to display per page (or request). Without it, the default is 30 results. Value is expected to be an integer.
.IP "query" 2
.IX Item "query"
The search query parameter is used to search for some specific text from a title.
.IP "min_votes" 2
.IX Item "min_votes"
Only return movies with a certain minimum number of votes. Expected value is an integer.
.IP "rating_min" 2
.IX Item "rating_min"
If you'd only like to see movies with a certain minimum rating, use this. It is expected to be a float value and if used, rating_max is required.
.IP "rating_max" 2
.IX Item "rating_max"
Used in conjunction with rating_min. Sets the upper limit of movies to return based on their rating. Expects this value to be a float.
.IP "genres" 2
.IX Item "genres"
The genres parameter is to be passed the genres id(s) you want to search for. You can get these ids from the Genres_getList method. In the event you want to search for multiple genres, you have to pass the values as a comma separated value.
.IP "genres_selector" 2
.IX Item "genres_selector"
Two Options: \f(CW\*(C`and\*(C'\fR, \f(CW\*(C`or\*(C'\fR
.Sp
Used when you search for more than 1 genre and useful to combine your genre searches.
.IP "release_min" 2
.IX Item "release_min"
Useful if you'd like to only search for movies from a particular date and on. If used, rating_max is required. The value is expected to be an epoch value.
.IP "release_max" 2
.IX Item "release_max"
Sets the upper date limit to search for. Like release_min this is expected to be an epoch value and if used, release_min is required.
.IP "year" 2
.IX Item "year"
If you'd only like to search for movies from a particular year, this if your option. Expects a single integer value.
.IP "certifications" 2
.IX Item "certifications"
Like genres, you can pass multiple values to this option. Comma separate them in this case. The values to be used here are the \s-1MPAA\s0 values like 'R' or '\s-1PG\-13\s0'. When more than one value is passed, it is assumed to be an \s-1OR\s0 search.
.IP "companies" 2
.IX Item "companies"
Useful if you'd like to find the movies from a particular studio. You can pass it more than one id which is expected to be comma separated. When more than one id is passed, it is assumed to be an \s-1OR\s0 search.
.IP "countries" 2
.IX Item "countries"
If you'd like to limit your result set to movies from a particular country you can pass their 2 letter country code. You can pass more than one value and in this case make sure they are comma separated. When more than one id is passed, it is assumed to be an \s-1OR\s0 search.
.RE
.RS 1
.Sp
.Vb 6
\&        # Returns all movies rated 10.
\&        my $data = $api\->Movie_browse(
\&                order_by                => \*(Aqrating\*(Aq,
\&                order                   => \*(Aqasc\*(Aq,
\&                rating_min              => \*(Aq10\*(Aq
\&        );
\&        
\&        # Returns all movies containing "inception"
\&        my $data = $api\->Movie_browse(
\&                order_by                => \*(Aqrating\*(Aq,
\&                order                   => \*(Aqasc\*(Aq,
\&                query                   => \*(Aqinception\*(Aq
\&        );
.Ve
.RE
.ie n .IP "Movie_getImages( $movieid )" 1
.el .IP "Movie_getImages( \f(CW$movieid\fR )" 1
.IX Item "Movie_getImages( $movieid )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.getImages>\*(C'\fR
.Sp
The Movie_getImages method is used to retrieve all of the backdrops and posters for a particular movie. This is useful to scan for updates, or new images if that's all you're after. No point on calling Movie_getInfo if you're only interested in images.
.Sp
This method expects either a TMDb Movie \s-1ID\s0 or \s-1IMDB\s0 Movie \s-1ID\s0.
.Sp
.Vb 2
\&        $api\->Movie_getImages(\*(Aq550\*(Aq);
\&        $api\->Movie_getImages(\*(Aqtt0137523\*(Aq);
.Ve
.ie n .IP "Movie_getInfo( $movieid )" 1
.el .IP "Movie_getInfo( \f(CW$movieid\fR )" 1
.IX Item "Movie_getInfo( $movieid )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.getInfo>\*(C'\fR
.Sp
The Movie_getInfo method is used to retrieve specific information about a movie. Things like overview, release date, cast data, genre's, YouTube trailer link, etc...
.Sp
This method expects a TMDb Movie \s-1ID\s0.
.Sp
.Vb 1
\&        $api\->Movie_getInfo(\*(Aq550\*(Aq);
.Ve
.IP "Movie_getLatest" 1
.IX Item "Movie_getLatest"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.getLatest>\*(C'\fR
.Sp
The Movie_getLatest method is a simple method. It returns the \s-1ID\s0 of the last movie created in the db. This is useful if you are scanning the database and want to know which id to stop at.
.Sp
.Vb 1
\&        $api\->Movie_getLatest();
.Ve
.ie n .IP "Movie_getTranslations( $movieid )" 1
.el .IP "Movie_getTranslations( \f(CW$movieid\fR )" 1
.IX Item "Movie_getTranslations( $movieid )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.getTranslations>\*(C'\fR
.Sp
The Movie_getTranslations method will return the translations that a particular movie has. The languages returned can then be used with the Movie_search or Movie_getInfo methods. Remember though, just because the language was added to the movie it doesn't mean the data is complete.
.Sp
This method expects a TMDb Movie \s-1ID\s0.
.Sp
.Vb 1
\&        $api\->Movie_getTranslations(\*(Aq550\*(Aq);
.Ve
.ie n .IP "Movie_getVersion( $movieid )" 1
.el .IP "Movie_getVersion( \f(CW$movieid\fR )" 1
.IX Item "Movie_getVersion( $movieid )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.getVersion>\*(C'\fR
.Sp
The Movie_getVersion method is used to retrieve the last modified time along with the current version number of the called object(s). This is useful if you've already called the object sometime in the past and simply want to do a quick check for updates. This method supports calling anywhere between 1 and 50 items at a time.
.Sp
This method expects a single TMDb Movie \s-1ID\s0 or set of IDs.
.Sp
.Vb 2
\&        $api\->Movie_getVersion(\*(Aq585\*(Aq);
\&        $api\->Movie_getVersion(\*(Aq585,155,11,550\*(Aq);
.Ve
.ie n .IP "Movie_imdbLookup( $imdbid )" 1
.el .IP "Movie_imdbLookup( \f(CW$imdbid\fR )" 1
.IX Item "Movie_imdbLookup( $imdbid )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.imdbLookup>\*(C'\fR
.Sp
The Movie_imdbLookup method is the easiest and quickest way to search for a movie based on it's IMDb \s-1ID\s0. You can use Movie.imdbLookup method to get the TMDb id of a movie if you already have the \s-1IMDB\s0 id.
.Sp
This method expects an \s-1IMDB\s0 Movie \s-1ID\s0.
.Sp
.Vb 1
\&        $api\->Movie_imdbLookup(\*(Aqtt0137523\*(Aq);
.Ve
.ie n .IP "Movie_search( $query )" 1
.el .IP "Movie_search( \f(CW$query\fR )" 1
.IX Item "Movie_search( $query )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Movie.search>\*(C'\fR
.Sp
The Movie_search method is the easiest and quickest way to search for a movie. It is a mandatory method in order to get the movie id to pass to (as an example) the Movie_getInfo method.
.Sp
This method
.Sp
.Vb 2
\&        $api\->Movie_search(\*(AqTransformers\*(Aq);
\&        $api\->Movie_search(\*(AqTransformers 2007\*(Aq);
.Ve
.ie n .IP "Person_getInfo( $personid )" 1
.el .IP "Person_getInfo( \f(CW$personid\fR )" 1
.IX Item "Person_getInfo( $personid )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Person.getInfo>\*(C'\fR
.Sp
The Person_getInfo method is used to retrieve the full filmography, known movies, images and things like birthplace for a specific person in the TMDb database.
.Sp
This method expects a TMDb Person \s-1ID\s0.
.Sp
.Vb 1
\&        $api\->Person_getInfo(\*(Aq500\*(Aq);
.Ve
.IP "Person_getLatest" 1
.IX Item "Person_getLatest"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Person.getLatest>\*(C'\fR
.Sp
The Person_getLatest method is a simple method. It returns the \s-1ID\s0 of the last person created in the db. This is useful if you are scanning the database and want to know which id to stop at.
.Sp
.Vb 1
\&        $api\->Person_getLatest();
.Ve
.IP "Person_getVersion" 1
.IX Item "Person_getVersion"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Person.getVersion>\*(C'\fR
.Sp
The Person_getVersion method is used to retrieve the last modified time along with the current version number of the called object(s). This is useful if you've already called the object sometime in the past and simply want to do a quick check for updates. This method supports calling anywhere between 1 and 50 items at a time.
.Sp
This method expects a single TMDb Person \s-1ID\s0 or set of IDs.
.Sp
.Vb 2
\&        $api\->Person_getVersion(\*(Aq287\*(Aq);
\&        $api\->Person_getVersion(\*(Aq287,5064,819\*(Aq);
.Ve
.ie n .IP "Person_search( $query )" 1
.el .IP "Person_search( \f(CW$query\fR )" 1
.IX Item "Person_search( $query )"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Person.search>\*(C'\fR
.Sp
The Person_search method is used to search for an actor, actress or production member.
.Sp
This method expects a query.
.Sp
.Vb 2
\&        $api\->Person_search(\*(AqBrad Pitt\*(Aq);
\&        $api\->Person_search(\*(AqJames Earl Jones\*(Aq);
.Ve
.IP "Genres_getList" 1
.IX Item "Genres_getList"
\&\f(CW\*(C`<http://api.themoviedb.org/2.1/methods/Genres.getList>\*(C'\fR
.Sp
The Genres_getList method is used to retrieve a list of valid genres within TMDb. You can also request the translated values by passing the language option.
.Sp
.Vb 1
\&        $api\->Genres_getList();
.Ve
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.ie n .IP "buildURL( $type )" 1
.el .IP "buildURL( \f(CW$type\fR )" 1
.IX Item "buildURL( $type )"
Builds a \s-1URL\s0 based on type passed and set values from class, expects one of the following: Movie.browse, Movie.getImages, Movie.getInfo, Movie.getLatest, Movie.getTranslations, Movie.getVersion, Movie.imdbLookup, Movie.search, Person.getInfo, Person.getLatest, Person.getInfo, Person.search, Genres.getList
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Jobson, <pjobson@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by Paul Jobson
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.9 or,
at your option, any later version of Perl 5 you may have available.
